"""
Ge√ßmi≈ü Fi≈üler Widget'ƒ± (Excel Export D√ºzeltildi)
"""
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QLabel, QLineEdit, QPushButton, QTableWidget,
    QTableWidgetItem, QComboBox, QDateEdit, QTextEdit,
    QGroupBox, QFrame, QHeaderView, QMessageBox,
    QFileDialog, QProgressBar, QTabWidget
)
from PySide6.QtCore import Qt, QDate, Signal, QTimer
from PySide6.QtGui import QFont
from datetime import datetime, timedelta
import sys 
import os

from decimal import Decimal

# Proje k√∂k dizinini path'e ekle
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.models import Invoice
from modules.invoice_manager import InvoiceManager
from utils.pdf_generator import PDFGenerator
# --- YENƒ∞ EKLENEN IMPORT (Excel Export i√ßin) ---
from modules.data_importer import DataImporter
# ---------------------------------------------


class InvoiceHistoryWidget(QWidget):
    """Ge√ßmi≈ü fi≈üler widget'ƒ±"""

    def __init__(self):
        super().__init__()
        self.invoice_manager = InvoiceManager()
        self.pdf_generator = PDFGenerator()

        self.init_ui()
        self.setup_connections()

        # Otomatik yenileme timer'ƒ±
        self.refresh_timer = QTimer(self) # Parent eklendi
        # Lambda fonksiyonunu show_message olmadan √ßaƒüƒ±rmak i√ßin d√ºzeltme
        self.refresh_timer.timeout.connect(lambda: self.load_invoices(show_message=False))
        self.refresh_timer.start(30000)  # 30 saniyede bir yenile

        # Ba≈ülangƒ±√ßta fi≈üleri y√ºkle
        self.load_invoices(show_message=False)


    def init_ui(self):
        """UI bile≈üenlerini olu≈ütur"""
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # Ba≈ülƒ±k
        title_label = QLabel("üìã Ge√ßmi≈ü Fi≈üler")
        title_label.setFont(QFont("Roboto", 16, QFont.Weight.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)

        # Filtre paneli
        filter_panel = self.create_filter_panel()
        layout.addWidget(filter_panel)

        # Fi≈ü listesi
        self.invoice_table = QTableWidget()
        self.invoice_table.setColumnCount(9) # Sil butonu i√ßin 9 s√ºtun
        self.invoice_table.setHorizontalHeaderLabels([
            "Fi≈ü No", "Tarih", "M√º≈üteri", "Ara Toplam", "KDV", "Toplam",
            "G√∂r√ºnt√ºle", "PDF", "Sil"
        ])
        self.invoice_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        # S√ºtun geni≈üliklerini ayarla (Opsiyonel ama daha iyi g√∂r√ºn√ºm i√ßin)
        self.invoice_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents) # Fi≈ü No
        self.invoice_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents) # Tarih
        self.invoice_table.horizontalHeader().setSectionResizeMode(2, QHeaderView.Stretch)        # M√º≈üteri
        self.invoice_table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeToContents) # Ara Toplam
        self.invoice_table.horizontalHeader().setSectionResizeMode(4, QHeaderView.ResizeToContents) # KDV
        self.invoice_table.horizontalHeader().setSectionResizeMode(5, QHeaderView.ResizeToContents) # Toplam
        self.invoice_table.horizontalHeader().setSectionResizeMode(6, QHeaderView.ResizeToContents) # G√∂r√ºnt√ºle
        self.invoice_table.horizontalHeader().setSectionResizeMode(7, QHeaderView.ResizeToContents) # PDF
        self.invoice_table.horizontalHeader().setSectionResizeMode(8, QHeaderView.ResizeToContents) # Sil
        # Se√ßim modunu ayarla (T√ºm satƒ±rƒ± se√ß)
        self.invoice_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.invoice_table.setSelectionMode(QTableWidget.SingleSelection) # Tek satƒ±r se√ßimi
        self.invoice_table.setEditTriggers(QTableWidget.NoEditTriggers) # D√ºzenlemeyi kapat
        layout.addWidget(self.invoice_table)

        # Alt butonlar
        button_panel = self.create_button_panel()
        layout.addWidget(button_panel)

    def create_filter_panel(self):
        """Filtre panelini olu≈ütur"""
        panel = QFrame(); panel.setFrameStyle(QFrame.StyledPanel); panel.setStyleSheet("QFrame { background-color: white; border: 1px solid #e0e0e0; border-radius: 8px; }")
        layout = QHBoxLayout(panel); layout.setSpacing(10)
        layout.addWidget(QLabel("Ba≈ülangƒ±√ß:"))
        self.start_date = QDateEdit(); self.start_date.setDate(QDate.currentDate().addDays(-30)); self.start_date.setCalendarPopup(True); layout.addWidget(self.start_date)
        layout.addWidget(QLabel("Biti≈ü:"))
        self.end_date = QDateEdit(); self.end_date.setDate(QDate.currentDate()); self.end_date.setCalendarPopup(True); layout.addWidget(self.end_date)
        layout.addWidget(QLabel("M√º≈üteri:"))
        self.customer_filter = QLineEdit(); self.customer_filter.setPlaceholderText("M√º≈üteri adƒ± ara..."); layout.addWidget(self.customer_filter)
        self.filter_btn = QPushButton("üîç Filtrele"); self.filter_btn.setStyleSheet("QPushButton { background-color: #2196f3; color: white; border: none; padding: 8px 16px; border-radius: 4px; font-weight: bold; } QPushButton:hover { background-color: #1976d2; }"); layout.addWidget(self.filter_btn)
        return panel

    def create_button_panel(self):
        """Buton panelini olu≈ütur"""
        panel = QFrame(); layout = QHBoxLayout(panel); layout.setSpacing(10)
        self.pdf_btn = QPushButton("üìÑ PDF Olu≈ütur"); self.pdf_btn.setStyleSheet("QPushButton { background-color: #ff9800; color: white; border: none; padding: 10px 20px; border-radius: 5px; font-weight: bold; } QPushButton:hover { background-color: #f57c00; }"); layout.addWidget(self.pdf_btn)
        self.excel_btn = QPushButton("üìà Excel'e Aktar"); self.excel_btn.setStyleSheet("QPushButton { background-color: #4caf50; color: white; border: none; padding: 10px 20px; border-radius: 5px; font-weight: bold; } QPushButton:hover { background-color: #45a049; }"); layout.addWidget(self.excel_btn)
        self.refresh_btn = QPushButton("üîÑ Yenile"); self.refresh_btn.setStyleSheet("QPushButton { background-color: #9c27b0; color: white; border: none; padding: 10px 20px; border-radius: 5px; font-weight: bold; } QPushButton:hover { background-color: #7b1fa2; }"); layout.addWidget(self.refresh_btn)
        layout.addStretch(); return panel

    def setup_connections(self):
        """Sinyal baƒülantƒ±larƒ±nƒ± kur"""
        self.filter_btn.clicked.connect(self.filter_invoices)
        self.pdf_btn.clicked.connect(self.generate_selected_pdf) # Se√ßili olanƒ± PDF yapacak
        self.excel_btn.clicked.connect(self.export_to_excel) # Hatalƒ± fonksiyonu √ßaƒüƒ±rƒ±yordu, d√ºzeltildi
        self.refresh_btn.clicked.connect(lambda: self.load_invoices(show_message=True)) # Yenile butonu mesaj g√∂stersin
        self.customer_filter.textChanged.connect(self.filter_invoices) # Yazarken filtrele

    def load_invoices(self, show_message=True):
        """Fi≈üleri y√ºkle"""
        print("DEBUG: load_invoices √ßaƒürƒ±ldƒ±.") # Debug
        try:
            start_date = self.start_date.date().toPython()
            end_date_obj = self.end_date.date().toPython()
            # Biti≈ü g√ºn√ºn√º dahil etmek i√ßin sonraki g√ºn√ºn ba≈ülangƒ±cƒ±nƒ± al
            end_date = end_date_obj + timedelta(days=1)

            # Ba≈ülangƒ±√ß ve biti≈ü aynƒ±ysa veya ba≈ülangƒ±√ß biti≈üten sonraysa mantƒ±ksƒ±z olur,
            # ba≈ülangƒ±cƒ± 30 g√ºn geriye alabiliriz veya kullanƒ±cƒ±yƒ± uyarabiliriz.
            # ≈ûimdilik ba≈ülangƒ±cƒ± 30 g√ºn geri alalƒ±m.
            if start_date >= end_date_obj:
                 start_date = end_date_obj - timedelta(days=30)
                 self.start_date.setDate(QDate(start_date.year, start_date.month, start_date.day)) # UI'yƒ± da g√ºncelle
                 if show_message:
                     QMessageBox.information(self, "Bilgi", "Ba≈ülangƒ±√ß tarihi biti≈ü tarihinden sonra olamaz. Son 30 g√ºn g√∂steriliyor.")


            print(f"DEBUG: Fi≈üler y√ºkleniyor: {start_date} - {end_date_obj}") # Debug
            invoices = self.invoice_manager.get_invoices_by_date_range(start_date, end_date) # Manager'a doƒüru tarihleri g√∂nder

            if not invoices:
                if show_message:
                    QMessageBox.information(self, "Bilgi", "Se√ßilen tarih aralƒ±ƒüƒ±nda fi≈ü bulunamadƒ±!")
                self.invoice_table.setRowCount(0) # Tabloyu temizle
                return

            self.populate_invoice_table(invoices)

        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Fi≈üler y√ºklenemedi!\nHata: {str(e)}")
            print(f"DEBUG: Fi≈ü y√ºkleme hatasƒ±: {e}") # Debug

    def populate_invoice_table(self, invoices):
        """Fi≈ü tablosunu doldur"""
        self.invoice_table.setRowCount(0) # √ñnce temizle
        self.invoice_table.setRowCount(len(invoices))
        print(f"DEBUG: Tablo dolduruluyor: {len(invoices)} fi≈ü.") # Debug

        for row, invoice in enumerate(invoices):
             # invoice None veya eksik attribute kontrol√º
            if not invoice or not hasattr(invoice, 'invoice_number'):
                print(f"UYARI: Satƒ±r {row} i√ßin ge√ßersiz fi≈ü verisi.")
                continue

            # Fi≈ü No
            item_num = QTableWidgetItem(invoice.invoice_number)
            self.invoice_table.setItem(row, 0, item_num)
            # Tarih
            date_str = invoice.invoice_date.strftime("%d.%m.%Y %H:%M") if hasattr(invoice, 'invoice_date') and invoice.invoice_date else "N/A"
            item_date = QTableWidgetItem(date_str)
            self.invoice_table.setItem(row, 1, item_date)
            # M√º≈üteri
            item_cust = QTableWidgetItem(invoice.customer_name or "")
            self.invoice_table.setItem(row, 2, item_cust)
            # Ara Toplam
            item_sub = QTableWidgetItem(f"{invoice.subtotal or 0:.2f} TL"); item_sub.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            self.invoice_table.setItem(row, 3, item_sub)
            # KDV
            item_tax = QTableWidgetItem(f"{invoice.tax_amount or 0:.2f} TL"); item_tax.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            self.invoice_table.setItem(row, 4, item_tax)
            # Toplam
            item_total = QTableWidgetItem(f"{invoice.total_amount or 0:.2f} TL"); item_total.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            item_total.setFont(QFont("Roboto", 10, QFont.Weight.Bold)) # Toplamƒ± kalƒ±n yap
            self.invoice_table.setItem(row, 5, item_total)

            # G√∂r√ºnt√ºle butonu
            view_btn = QPushButton("üëÅÔ∏è"); view_btn.setToolTip("Fi≈ü Detaylarƒ±nƒ± G√∂r√ºnt√ºle")
            view_btn.clicked.connect(lambda checked, inv=invoice: self.view_invoice(inv))
            self.invoice_table.setCellWidget(row, 6, view_btn)
            # PDF butonu
            pdf_btn = QPushButton("üìÑ"); pdf_btn.setToolTip("Bu Fi≈üi PDF Olarak Kaydet")
            pdf_btn.clicked.connect(lambda checked, inv=invoice: self.generate_single_invoice_pdf(inv)) # Ayrƒ± fonksiyon
            self.invoice_table.setCellWidget(row, 7, pdf_btn)
            # Sil butonu
            delete_btn = QPushButton("‚ùå"); delete_btn.setToolTip("Bu Fi≈üi Sil")
            delete_btn.setStyleSheet("background-color: #e74c3c; color: white; border:none; border-radius: 3px;")
            delete_btn.clicked.connect(lambda checked, num=invoice.invoice_number: self.confirm_delete_invoice(num))
            self.invoice_table.setCellWidget(row, 8, delete_btn)

        # Tablonun i√ßeriƒüe g√∂re boyutlanmasƒ±nƒ± saƒüla (ilk iki s√ºtun i√ßin)
        # self.invoice_table.resizeColumnsToContents()
        print("DEBUG: Tablo dolduruldu.") # Debug


    def filter_invoices(self):
        """Fi≈üleri filtrele"""
        print("DEBUG: filter_invoices √ßaƒürƒ±ldƒ±.") # Debug
        try:
            start_date = self.start_date.date().toPython()
            end_date_obj = self.end_date.date().toPython()
            end_date = end_date_obj + timedelta(days=1) # Biti≈ü g√ºn√ºn√º dahil et

            if start_date >= end_date_obj:
                 # Mantƒ±ksƒ±z tarih aralƒ±ƒüƒ±, belki ilk y√ºklemedeki gibi davranmalƒ±?
                 # ≈ûimdilik filtrelemeden √ßƒ±kalƒ±m veya kullanƒ±cƒ±yƒ± uyaralƒ±m.
                 print("DEBUG: Ge√ßersiz tarih aralƒ±ƒüƒ±, filtreleme yapƒ±lmadƒ±.")
                 # self.load_invoices(show_message=False) # Ya da varsayƒ±lan aralƒ±ƒüƒ± y√ºkle
                 return

            customer_filter = self.customer_filter.text().strip()
            print(f"DEBUG: Filtreleme: {start_date} - {end_date_obj}, M√º≈üteri: '{customer_filter}'") # Debug

            invoices = self.invoice_manager.get_invoices_by_date_range(start_date, end_date)

            # M√º≈üteri filtresi uygula (b√ºy√ºk/k√º√ß√ºk harf duyarsƒ±z)
            if customer_filter:
                invoices = [inv for inv in invoices if inv and hasattr(inv, 'customer_name') and inv.customer_name and customer_filter.lower() in inv.customer_name.lower()]
                print(f"DEBUG: M√º≈üteri filtresi sonrasƒ± kalan fi≈ü sayƒ±sƒ±: {len(invoices)}") # Debug

            self.populate_invoice_table(invoices)

        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Filtreleme hatasƒ±!\nHata: {str(e)}")
            print(f"DEBUG: Filtreleme hatasƒ±: {e}") # Debug

    def confirm_delete_invoice(self, invoice_number):
        """Fi≈üi silmeden √∂nce kullanƒ±cƒ±dan onay al"""
        msg_box = QMessageBox(self); msg_box.setWindowTitle("Silme Onayƒ±"); msg_box.setText(f"<b>{invoice_number}</b> numaralƒ± fi≈üi kalƒ±cƒ± olarak silmek istediƒüinizden emin misiniz?"); msg_box.setInformativeText("Bu i≈ülem geri alƒ±namaz."); msg_box.setIcon(QMessageBox.Warning); msg_box.setStandardButtons(QMessageBox.Yes | QMessageBox.No); msg_box.setDefaultButton(QMessageBox.No)
        ret = msg_box.exec()
        if ret == QMessageBox.Yes:
            self.delete_invoice(invoice_number)

    def delete_invoice(self, invoice_number):
        """Fi≈üi veritabanƒ±ndan sil"""
        try:
            # InvoiceManager'da bu isimde bir metod olduƒüunu varsayƒ±yoruz
            if hasattr(self.invoice_manager, 'delete_invoice_by_number'):
                self.invoice_manager.delete_invoice_by_number(invoice_number)
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"{invoice_number} numaralƒ± fi≈ü ba≈üarƒ±yla silindi.")
                self.load_invoices(show_message=False) # Tabloyu yenile
            else:
                 QMessageBox.critical(self, "Hata", "InvoiceManager'da 'delete_invoice_by_number' metodu bulunamadƒ±.")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Fi≈ü silinirken bir hata olu≈ütu:\n{str(e)}")

    def view_invoice(self, invoice):
        """Fi≈üi g√∂r√ºnt√ºle"""
        try:
            full_invoice = self.invoice_manager.get_invoice_by_number(invoice.invoice_number)
            if full_invoice:
                self.show_invoice_details(full_invoice)
            else:
                QMessageBox.warning(self, "Uyarƒ±", "Fi≈ü detaylarƒ± bulunamadƒ±!")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Fi≈ü g√∂r√ºnt√ºlenemedi!\nHata: {str(e)}")

    def show_invoice_details(self, invoice):
        """Fi≈ü detaylarƒ±nƒ± bir dialogda g√∂ster"""
        from PySide6.QtWidgets import QDialog, QVBoxLayout, QTextEdit, QPushButton, QHBoxLayout # QHBoxLayout eklendi
        dialog = QDialog(self); dialog.setWindowTitle(f"Fi≈ü Detaylarƒ± - {invoice.invoice_number}"); dialog.setModal(True); dialog.resize(600, 500)
        layout = QVBoxLayout(dialog)
        details_text = f"""
Fƒ∞≈û DETAYLARI
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Fi≈ü No: {invoice.invoice_number}
Tarih: {invoice.invoice_date.strftime('%d.%m.%Y %H:%M') if hasattr(invoice, 'invoice_date') and invoice.invoice_date else "N/A"}
M√º≈üteri: {invoice.customer_name or ""}
Adres: {invoice.customer_address or 'Belirtilmemi≈ü'}
Teslim Eden: {invoice.delivery_person or 'Belirtilmemi≈ü'}
Teslim Alan: {invoice.receiver_person or 'Belirtilmemi≈ü'}

√úR√úN Lƒ∞STESƒ∞
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        if invoice.items: # None kontrol√º
            for item in invoice.items:
                 if item: # item None kontrol√º
                     details_text += f"""
Kod: {item.product_code or ""}
√úr√ºn: {item.product_name or ""}
Miktar: {item.quantity or 0}
Birim Fiyat: {item.unit_price or 0:.2f} TL
Toplam: {item.total_price or 0:.2f} TL
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        discount_amount = getattr(invoice, 'discount_amount', Decimal('0.0')) or Decimal('0.0')
        details_text += f"""

Fƒ∞YAT √ñZETƒ∞
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Ara Toplam: {invoice.subtotal or 0:.2f} TL
"""
        if discount_amount > 0:
             details_text += f"ƒ∞ndirim: -{discount_amount:.2f} TL\n"
        details_text += f"""KDV (%20): {invoice.tax_amount or 0:.2f} TL
TOPLAM: {invoice.total_amount or 0:.2f} TL
"""
        text_edit = QTextEdit(); text_edit.setPlainText(details_text); text_edit.setReadOnly(True); layout.addWidget(text_edit)
        button_layout = QHBoxLayout() # QHBoxLayout kullanƒ±ldƒ±
        pdf_btn = QPushButton("üìÑ PDF Olu≈ütur"); pdf_btn.clicked.connect(lambda: self.generate_single_invoice_pdf(invoice)); button_layout.addWidget(pdf_btn)
        close_btn = QPushButton("‚ùå Kapat"); close_btn.clicked.connect(dialog.close); button_layout.addWidget(close_btn)
        layout.addLayout(button_layout)
        dialog.exec()

    def generate_single_invoice_pdf(self, invoice):
        """Tek bir fi≈ü i√ßin PDF olu≈ütur (dialog i√ßinden √ßaƒürƒ±lƒ±r)"""
        try:
            # √ñnce tam fi≈ü detaylarƒ±nƒ± (item'lar dahil) aldƒ±ƒüƒ±ndan emin ol
            full_invoice = self.invoice_manager.get_invoice_by_number(invoice.invoice_number)
            if not full_invoice:
                 QMessageBox.warning(self, "Uyarƒ±", "PDF olu≈üturulacak fi≈ü detaylarƒ± bulunamadƒ±!")
                 return

            file_path, _ = QFileDialog.getSaveFileName(self, "PDF Kaydet", f"fis_{full_invoice.invoice_number}.pdf", "PDF Dosyalarƒ± (*.pdf)")
            if file_path:
                self.pdf_generator.generate_invoice_pdf(full_invoice, file_path)
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"PDF olu≈üturuldu!\nDosya: {file_path}")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"PDF olu≈üturulamadƒ±!\nHata: {str(e)}")

    def generate_selected_pdf(self):
        """Se√ßili fi≈ü i√ßin PDF olu≈ütur (ana ekrandaki buton)"""
        selected_rows = self.invoice_table.selectionModel().selectedRows()
        if not selected_rows:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen PDF olu≈üturmak i√ßin tablodan bir fi≈ü se√ßin!")
            return
        if len(selected_rows) > 1:
             QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen sadece bir fi≈ü se√ßin.")
             return

        selected_row_index = selected_rows[0].row()
        invoice_number_item = self.invoice_table.item(selected_row_index, 0) # Fi≈ü No s√ºtunu

        if not invoice_number_item:
             QMessageBox.warning(self, "Uyarƒ±", "Se√ßili satƒ±rdan fi≈ü numarasƒ± alƒ±namadƒ±.")
             return

        invoice_number = invoice_number_item.text()
        print(f"DEBUG: Se√ßili fi≈ü PDF'i olu≈üturulacak: {invoice_number}") # Debug

        try:
            # Tam fi≈ü bilgilerini al
            full_invoice = self.invoice_manager.get_invoice_by_number(invoice_number)
            if full_invoice:
                self.generate_single_invoice_pdf(full_invoice) # PDF olu≈üturma fonksiyonunu √ßaƒüƒ±r
            else:
                QMessageBox.warning(self, "Uyarƒ±", f"'{invoice_number}' numaralƒ± fi≈ü detaylarƒ± bulunamadƒ±!")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Fi≈ü detaylarƒ± alƒ±nƒ±rken hata olu≈ütu!\nHata: {str(e)}")


    # --- BU FONKSƒ∞YON TAMAMEN DEƒûƒ∞≈ûTƒ∞ (Excel Export D√ºzeltildi) ---
    def export_to_excel(self):
        """Excel'e aktar (D√úZELTƒ∞LDƒ∞ - DataImporter kullanƒ±lƒ±yor)"""
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Excel Kaydet", f"fisler_{datetime.now().strftime('%Y%m%d')}.xlsx", "Excel Dosyalarƒ± (*.xlsx)"
            )

            if file_path:
                # --- DOƒûRU SINIFI KULLAN ---
                # excel_handler = ExcelHandler() # YANLI≈û
                data_importer = DataImporter() # DOƒûRU

                # --- TARƒ∞HLERƒ∞ DOƒûRU FORMATTA (ISO STRING) AL ---
                start_date_py = self.start_date.date().toPython()
                end_date_py = self.end_date.date().toPython()
                # DataImporter.export_invoices BETWEEN kullandƒ±ƒüƒ± i√ßin +1 g√ºn GEREKMEZ
                start_date_str = start_date_py.isoformat()
                end_date_str = end_date_py.isoformat()
                # --------------------------------------------------

                print(f"DEBUG (History): export_invoices √ßaƒürƒ±lƒ±yor. Path: {file_path}, Start: {start_date_str}, End: {end_date_str}") # Debug

                # --- DOƒûRU FONKSƒ∞YONU √áAƒûIR ---
                data_importer.export_invoices(
                    file_path=file_path,
                    start_date=start_date_str,
                    end_date=end_date_str
                )
                # -----------------------------

                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"Excel dosyasƒ± olu≈üturuldu!\nDosya: {file_path}")

        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Excel dosyasƒ± olu≈üturulamadƒ±!\nHata: {str(e)}")
            print(f"DEBUG (History Excel Export): Hata: {e}") # Debug
    # --- DEƒûƒ∞≈ûƒ∞KLƒ∞K SONU ---