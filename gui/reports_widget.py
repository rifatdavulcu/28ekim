"""
Raporlama ve Analiz Widget'Ä±
"""
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QLabel, QPushButton, QComboBox, QDateEdit, QTableWidget,
    QTableWidgetItem, QGroupBox, QFrame, QHeaderView,
    QMessageBox, QFileDialog, QTabWidget, QProgressBar
)
from PySide6.QtCore import Qt, QDate, Signal
from datetime import datetime, timedelta
import sys
import os
from PySide6.QtGui import QFont

# Proje kÃ¶k dizinini path'e ekle
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.models import Invoice
from modules.report_generator import ReportGenerator

# --- YENÄ° EKLENEN IMPORT (HATA DÃœZELTMESÄ°) ---
from modules.data_importer import DataImporter
# ---------------------------------------------


class ReportsWidget(QWidget):
    """Raporlama ve Analiz Widget'Ä±"""
    
    # Signal'lar
    report_generated = Signal(str)  # Rapor oluÅŸturulduÄŸunda
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.report_generator = ReportGenerator()
        
        # --- YENÄ° EKLENEN NESNE (HATA DÃœZELTMESÄ°) ---
        # Excel'e aktarmak iÃ§in doÄŸru sÄ±nÄ±fÄ± (DataImporter) oluÅŸtur
        self.data_importer = DataImporter()
        # ---------------------------------------------
        
        self.current_report_data = None
        self.init_ui()
        self.setup_connections()
    
    def init_ui(self):
        """UI bileÅŸenlerini oluÅŸtur"""
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # BaÅŸlÄ±k
        title_label = QLabel("ðŸ“Š Raporlama ve Analiz")
        title_label.setFont(QFont("Roboto", 16, QFont.Weight.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # Ana iÃ§erik alanÄ±
        content_layout = QHBoxLayout()
        
        # Sol panel - Filtreler ve kontroller
        left_panel = self.create_filter_panel()
        content_layout.addWidget(left_panel, 1)
        
        # SaÄŸ panel - Rapor sonuÃ§larÄ±
        right_panel = self.create_report_panel()
        content_layout.addWidget(right_panel, 2)
        
        layout.addLayout(content_layout)
    
    def create_filter_panel(self):
        """Filtre paneli oluÅŸtur"""
        group = QGroupBox("ðŸ“‹ Rapor Filtreleri")
        group.setFont(QFont("Roboto", 12, QFont.Weight.Bold))
        layout = QVBoxLayout(group)
        
        # Tarih aralÄ±ÄŸÄ±
        date_layout = QGridLayout()
        
        date_layout.addWidget(QLabel("BaÅŸlangÄ±Ã§ Tarihi:"), 0, 0)
        self.start_date = QDateEdit()
        self.start_date.setDate(QDate.currentDate().addDays(-30))
        self.start_date.setCalendarPopup(True)
        date_layout.addWidget(self.start_date, 0, 1)
        
        date_layout.addWidget(QLabel("BitiÅŸ Tarihi:"), 1, 0)
        self.end_date = QDateEdit()
        self.end_date.setDate(QDate.currentDate())
        self.end_date.setCalendarPopup(True)
        date_layout.addWidget(self.end_date, 1, 1)
        
        layout.addLayout(date_layout)
        
        # Rapor tÃ¼rÃ¼
        layout.addWidget(QLabel("Rapor TÃ¼rÃ¼:"))
        self.report_type = QComboBox()
        self.report_type.addItems([
            "GÃ¼nlÃ¼k SatÄ±ÅŸ Raporu",
            "AylÄ±k SatÄ±ÅŸ Raporu", 
            "ÃœrÃ¼n BazlÄ± Rapor",
            "MÃ¼ÅŸteri BazlÄ± Rapor"
        ])
        layout.addWidget(self.report_type)
        
        # Butonlar
        button_layout = QVBoxLayout()
        
        self.generate_btn = QPushButton("ðŸ“Š Rapor OluÅŸtur")
        self.generate_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        button_layout.addWidget(self.generate_btn)
        
        self.excel_btn = QPushButton("ðŸ“„ Excel'e Aktar")
        self.excel_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        button_layout.addWidget(self.excel_btn)
        
        self.pdf_btn = QPushButton("ðŸ“„ PDF OluÅŸtur")
        self.pdf_btn.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        button_layout.addWidget(self.pdf_btn)
        
        layout.addLayout(button_layout)
        layout.addStretch()
        
        return group
    
    def create_report_panel(self):
        """Rapor paneli oluÅŸtur"""
        group = QGroupBox("ðŸ“ˆ Rapor SonuÃ§larÄ±")
        group.setFont(QFont("Roboto", 12, QFont.Weight.Bold))
        layout = QVBoxLayout(group)
        
        # Tab widget
        self.tab_widget = QTabWidget()
        
        # Rapor tab'Ä±
        self.report_tab = self.create_report_tab()
        self.tab_widget.addTab(self.report_tab, "ðŸ“Š Rapor")
        
        # Grafik tab'Ä±
        self.chart_tab = self.create_chart_tab()
        self.tab_widget.addTab(self.chart_tab, "ðŸ“ˆ Grafik")
        
        layout.addWidget(self.tab_widget)
        
        return group
    
    def create_report_tab(self):
        """Rapor tab'Ä± oluÅŸtur"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Rapor tablosu
        self.report_table = QTableWidget()
        self.report_table.setColumnCount(6)
        self.report_table.setHorizontalHeaderLabels([
            "Tarih", "FiÅŸ No", "MÃ¼ÅŸteri", "ÃœrÃ¼n", "Miktar", "Tutar"
        ])
        
        # Tablo ayarlarÄ±
        header = self.report_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.report_table.setAlternatingRowColors(True)
        self.report_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #bdc3c7;
                background-color: white;
                alternate-background-color: #f8f9fa;
            }
            QHeaderView::section {
                background-color: #34495e;
                color: white;
                padding: 8px;
                border: none;
                font-weight: bold;
            }
        """)
        
        layout.addWidget(self.report_table)
        
        # Ã–zet bilgiler
        summary_layout = QHBoxLayout()
        
        self.total_label = QLabel("Toplam: 0 â‚º")
        self.total_label.setFont(QFont("Roboto", 12, QFont.Weight.Bold))
        self.total_label.setStyleSheet("color: #27ae60;")
        summary_layout.addWidget(self.total_label)
        
        self.count_label = QLabel("FiÅŸ SayÄ±sÄ±: 0")
        self.count_label.setFont(QFont("Roboto", 12, QFont.Weight.Bold))
        self.count_label.setStyleSheet("color: #3498db;")
        summary_layout.addWidget(self.count_label)
        
        layout.addLayout(summary_layout)
        
        return widget
    
    def create_chart_tab(self):
        """Grafik tab'Ä± oluÅŸtur"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Grafik butonlarÄ±
        button_layout = QHBoxLayout()
        
        daily_btn = QPushButton("ðŸ“… GÃ¼nlÃ¼k SatÄ±ÅŸlar")
        daily_btn.clicked.connect(self.show_daily_sales_chart)
        button_layout.addWidget(daily_btn)
        
        monthly_btn = QPushButton("ðŸ“† AylÄ±k SatÄ±ÅŸlar")
        monthly_btn.clicked.connect(self.show_monthly_sales_chart)
        button_layout.addWidget(monthly_btn)
        
        product_btn = QPushButton("ðŸ“¦ ÃœrÃ¼n SatÄ±ÅŸlarÄ±")
        product_btn.clicked.connect(self.show_product_sales_chart)
        button_layout.addWidget(product_btn)
        
        layout.addLayout(button_layout)
        
        # Grafik alanÄ±
        self.chart_label = QLabel("Grafik burada gÃ¶rÃ¼ntÃ¼lenecek\nButonlara tÄ±klayarak grafikleri gÃ¶rÃ¼ntÃ¼leyebilirsiniz")
        self.chart_label.setAlignment(Qt.AlignCenter)
        self.chart_label.setStyleSheet("""
            QLabel {
                background-color: #f5f5f5;
                border: 2px dashed #ccc;
                border-radius: 8px;
                padding: 20px;
                font-size: 14px;
                color: #666;
            }
        """)
        layout.addWidget(self.chart_label)
        
        return widget
    
    def setup_connections(self):
        """Signal-slot baÄŸlantÄ±larÄ±nÄ± kur"""
        # Rapor butonlarÄ±
        self.generate_btn.clicked.connect(self.generate_report)
        self.excel_btn.clicked.connect(self.export_to_excel)
        self.pdf_btn.clicked.connect(self.export_to_pdf)
        
        # Tarih deÄŸiÅŸiklikleri
        self.start_date.dateChanged.connect(self.on_date_changed)
        self.end_date.dateChanged.connect(self.on_date_changed)
    
    def on_date_changed(self):
        """Tarih deÄŸiÅŸtiÄŸinde"""
        # Otomatik rapor gÃ¼ncelleme (isteÄŸe baÄŸlÄ±)
        pass
    
    def generate_report(self):
        """Rapor oluÅŸtur"""
        try:
            start_date = self.start_date.date().toPython()
            end_date = self.end_date.date().toPython()
            report_type = self.report_type.currentText()
            
            # Rapor verilerini al
            if "GÃ¼nlÃ¼k" in report_type:
                self.current_report_data = self.report_generator.get_daily_sales(start_date, end_date)
            elif "AylÄ±k" in report_type:
                self.current_report_data = self.report_generator.get_monthly_sales(start_date.year)
            elif "ÃœrÃ¼n" in report_type:
                self.current_report_data = self.report_generator.get_product_analysis(start_date, end_date)
            elif "MÃ¼ÅŸteri" in report_type:
                self.current_report_data = self.report_generator.get_customer_analysis(start_date, end_date)
            else:
                self.current_report_data = []

            # Tabloyu gÃ¼ncelle
            self.update_report_table()
            
            # Signal gÃ¶nder
            self.report_generated.emit(f"{report_type} oluÅŸturuldu")
            
            QMessageBox.information(self, "BaÅŸarÄ±lÄ±", f"{report_type} baÅŸarÄ±yla oluÅŸturuldu!")
            
        except Exception as e:
            QMessageBox.warning(self, "Hata", f"Rapor oluÅŸturulamadÄ±: {str(e)}")
            print(f"Rapor oluÅŸturma hatasÄ±: {e}") # Debug iÃ§in
    
    def update_report_table(self):
        """Rapor tablosunu gÃ¼ncelle"""
        if not self.current_report_data:
            self.report_table.setRowCount(0)
            self.total_label.setText("Toplam Tutar: 0.00 â‚º")
            self.count_label.setText("Toplam SatÄ±r: 0")
            return
        
        # Tabloyu temizle
        self.report_table.setRowCount(0)
        
        # Verileri ekle
        total_amount = 0
        row_count = 0
        
        # Rapor tÃ¼rÃ¼ne gÃ¶re tabloyu doldur
        report_type = self.report_type.currentText()

        # SÃ¼tun baÅŸlÄ±klarÄ±nÄ± rapora gÃ¶re ayarla
        if "ÃœrÃ¼n" in report_type:
            headers = ["Kod", "ÃœrÃ¼n AdÄ±", "Toplam Miktar", "Toplam Tutar", "Ort. Fiyat", ""]
        elif "MÃ¼ÅŸteri" in report_type:
            headers = ["MÃ¼ÅŸteri AdÄ±", "FiÅŸ SayÄ±sÄ±", "Toplam Tutar", "Ort. FiÅŸ TutarÄ±", "", ""]
        elif "GÃ¼nlÃ¼k" in report_type:
            headers = ["Tarih", "FiÅŸ SayÄ±sÄ±", "GÃ¼nlÃ¼k Ciro", "", "", ""]
        elif "AylÄ±k" in report_type:
            headers = ["Ay", "FiÅŸ SayÄ±sÄ±", "AylÄ±k Ciro", "", "", ""]
        else:
            headers = ["Tarih", "FiÅŸ No", "MÃ¼ÅŸteri", "ÃœrÃ¼n", "Miktar", "Tutar"]
        
        self.report_table.setColumnCount(len(headers))
        self.report_table.setHorizontalHeaderLabels(headers)


        for item in self.current_report_data:
            row = self.report_table.rowCount()
            self.report_table.insertRow(row)
            
            # Rapor tÃ¼rÃ¼ne gÃ¶re satÄ±rlarÄ± doldur
            if "ÃœrÃ¼n" in report_type:
                self.report_table.setItem(row, 0, QTableWidgetItem(item.get('code', '')))
                self.report_table.setItem(row, 1, QTableWidgetItem(item.get('name', '')))
                self.report_table.setItem(row, 2, QTableWidgetItem(str(item.get('quantity', 0))))
                self.report_table.setItem(row, 3, QTableWidgetItem(f"{item.get('total', 0):.2f} â‚º"))
                self.report_table.setItem(row, 4, QTableWidgetItem(f"{item.get('avg_price', 0):.2f} â‚º"))
                total_amount += item.get('total', 0)
            elif "MÃ¼ÅŸteri" in report_type:
                self.report_table.setItem(row, 0, QTableWidgetItem(item.get('name', '')))
                self.report_table.setItem(row, 1, QTableWidgetItem(str(item.get('invoice_count', 0))))
                self.report_table.setItem(row, 2, QTableWidgetItem(f"{item.get('total_amount', 0):.2f} â‚º"))
                self.report_table.setItem(row, 3, QTableWidgetItem(f"{item.get('avg_amount', 0):.2f} â‚º"))
                total_amount += item.get('total_amount', 0)
            elif "GÃ¼nlÃ¼k" in report_type:
                self.report_table.setItem(row, 0, QTableWidgetItem(str(item.get('date', ''))))
                self.report_table.setItem(row, 1, QTableWidgetItem(str(item.get('invoice_count', 0))))
                self.report_table.setItem(row, 2, QTableWidgetItem(f"{item.get('revenue', 0):.2f} â‚º"))
                total_amount += item.get('revenue', 0)
            elif "AylÄ±k" in report_type:
                self.report_table.setItem(row, 0, QTableWidgetItem(str(item.get('month', ''))))
                self.report_table.setItem(row, 1, QTableWidgetItem(str(item.get('invoice_count', 0))))
                self.report_table.setItem(row, 2, QTableWidgetItem(f"{item.get('revenue', 0):.2f} â‚º"))
                total_amount += item.get('revenue', 0)
            
            row_count += 1
        
        # Ã–zet bilgileri gÃ¼ncelle
        self.total_label.setText(f"Toplam Tutar: {total_amount:.2f} â‚º")
        self.count_label.setText(f"Toplam SatÄ±r: {row_count}")
    
    def show_daily_sales_chart(self):
        """GÃ¼nlÃ¼k satÄ±ÅŸ grafiÄŸi gÃ¶ster"""
        try:
            start_date = self.start_date.date().toPython()
            end_date = self.end_date.date().toPython()
            
            chart_data = self.report_generator.get_daily_sales_data(start_date, end_date)
            
            self.chart_label.setText(f"ðŸ“… GÃ¼nlÃ¼k SatÄ±ÅŸ GrafiÄŸi\n\n{chart_data}")
            
        except Exception as e:
            QMessageBox.warning(self, "UyarÄ±", f"Grafik oluÅŸturulamadÄ±: {str(e)}")
    
    def show_monthly_sales_chart(self):
        """AylÄ±k satÄ±ÅŸ grafiÄŸi gÃ¶ster"""
        try:
            start_date = self.start_date.date().toPython()
            end_date = self.end_date.date().toPython()
            
            # Report generator'daki fonksiyonunuz start/end date bekliyordu, 
            # ancak verdiÄŸiniz kodda (report_generator.py) sadece 'year' alÄ±yor.
            # Åžimdilik start_date'in yÄ±lÄ±nÄ± alÄ±yorum.
            chart_data = self.report_generator.get_monthly_sales_data(start_date, end_date)
            
            self.chart_label.setText(f"ðŸ“† AylÄ±k SatÄ±ÅŸ GrafiÄŸi\n\n{chart_data}")
            
        except Exception as e:
            QMessageBox.warning(self, "UyarÄ±", f"Grafik oluÅŸturulamadÄ±: {str(e)}")
    
    def show_product_sales_chart(self):
        """ÃœrÃ¼n satÄ±ÅŸ grafiÄŸi gÃ¶ster"""
        try:
            chart_data = self.report_generator.get_product_sales_data()
            
            self.chart_label.setText(f"ðŸ“¦ ÃœrÃ¼n SatÄ±ÅŸ GrafiÄŸi\n\n{chart_data}")
            
        except Exception as e:
            QMessageBox.warning(self, "UyarÄ±", f"Grafik oluÅŸturulamadÄ±: {str(e)}")
    

    # --- BU FONKSÄ°YON TAMAMEN DEÄžÄ°ÅžTÄ° (HATA DÃœZELTMESÄ°) ---
    def export_to_excel(self):
        """
        FiÅŸleri tarih aralÄ±ÄŸÄ±na gÃ¶re Excel'e aktarÄ±r.
        Not: Bu fonksiyon 'GeÃ§miÅŸ FiÅŸler'i aktarÄ±r, mevcut tabloyu deÄŸil.
        """
        try:
            # 1. KullanÄ±cÄ±dan tarih aralÄ±ÄŸÄ±nÄ± al (Python formatÄ±nda)
            start_date_py = self.start_date.date().toPython()
            end_date_py = self.end_date.date().toPython()

            # 2. DataImporter'Ä±n beklediÄŸi string formatÄ±na (ISO) Ã§evir
            #    DataImporter'daki sorgu 'BETWEEN ? AND ?' olduÄŸu iÃ§in 
            #    tarihleri doÄŸrudan ISO formatÄ±nda string olarak gÃ¶nderebiliriz.
            start_date_str = start_date_py.isoformat()
            end_date_str = end_date_py.isoformat()
            
            # 3. Dosya kaydetme diyaloÄŸunu aÃ§
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Excel FiÅŸ Raporu Kaydet", 
                f"fis_raporu_{datetime.now().strftime('%Y%m%d')}.xlsx",
                "Excel DosyalarÄ± (*.xlsx)"
            )
            
            if file_path:
                # 4. DataImporter'daki DOÄžRU fonksiyonu Ã§aÄŸÄ±r
                print(f"DEBUG: export_invoices Ã§aÄŸrÄ±lÄ±yor. Path: {file_path}, Start: {start_date_str}, End: {end_date_str}")
                self.data_importer.export_invoices(
                    file_path=file_path, 
                    start_date=start_date_str, 
                    end_date=end_date_str
                )
                QMessageBox.information(self, "BaÅŸarÄ±lÄ±", f"FiÅŸ raporu Excel'e aktarÄ±ldÄ±:\n{file_path}")
                    
        except Exception as e:
            QMessageBox.warning(self, "Hata", f"Excel dosyasÄ± oluÅŸturulamadÄ±!\nHata: {str(e)}")
            print(f"Excel aktarÄ±m hatasÄ±: {e}") # Debug iÃ§in
    # --- DEÄžÄ°ÅžÄ°KLÄ°K SONU ---

    
    def export_to_pdf(self):
        """PDF oluÅŸtur"""
        if not self.current_report_data:
            QMessageBox.warning(self, "UyarÄ±", "Ã–nce rapor oluÅŸturun!")
            return
        
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self, "PDF DosyasÄ± Kaydet", 
                f"rapor_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                "PDF DosyalarÄ± (*.pdf)"
            )
            
            if file_path:
                # PDF oluÅŸturma mantÄ±ÄŸÄ±nÄ± ReportGenerator'a devret
                
                # Rapor verisini 'generate_report_pdf'nin beklediÄŸi formata sok
                report_data_dict = {
                    'type': self.report_type.currentText(),
                    'start_date': self.start_date.date().toString("dd.MM.yyyy"),
                    'end_date': self.end_date.date().toString("dd.MM.yyyy"),
                    'stats': {
                         'total_revenue': sum(item.get('total', item.get('total_amount', item.get('revenue', 0))) for item in self.current_report_data),
                         'total_invoices': len(self.current_report_data),
                         # Bu veriler 'report_generator.py' iÃ§inden daha doÄŸru hesaplanmalÄ±
                         'avg_invoice_amount': 0, 
                         'top_product': 'N/A' 
                    },
                    'details': self.current_report_data
                }
                
                # report_generator.py dosyanÄ±zda 'generate_report_pdf' fonksiyonu yoksa bu satÄ±r hata verir
                self.report_generator.generate_report_pdf(report_data_dict, file_path)
                QMessageBox.information(self, "BaÅŸarÄ±lÄ±", f"Rapor PDF olarak kaydedildi:\n{file_path}")
                
        except AttributeError as ae:
             if 'generate_report_pdf' in str(ae):
                 QMessageBox.warning(self, "Hata", "PDF oluÅŸturma fonksiyonu (generate_report_pdf) 'report_generator.py' iÃ§inde bulunamadÄ±.")
             else:
                 QMessageBox.warning(self, "Hata", f"PDF oluÅŸturma baÅŸarÄ±sÄ±z: {str(ae)}")
        except Exception as e:
            QMessageBox.warning(self, "Hata", f"PDF oluÅŸturma baÅŸarÄ±sÄ±z: {str(e)}")
    
    def refresh_data(self):
        """Verileri yenile"""
        # Mevcut raporu yeniden oluÅŸtur
        if self.current_report_data:
            self.generate_report()